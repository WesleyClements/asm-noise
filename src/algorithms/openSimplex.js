import random from '../util/random';

function OpenSimplex(stdlib, foreign, heap) {
  'use asm';

  var imul = stdlib.Math.imul;
  var floor = stdlib.Math.floor;

  var _setSeed = foreign.setSeed;
  var nextU32 = foreign.nextUint32;

  var heapU16 = new stdlib.Uint16Array(heap);
  var heapU32 = new stdlib.Uint32Array(heap);
  var heapI32 = new stdlib.Int32Array(heap);
  var heapF64 = new stdlib.Float64Array(heap);

  var pSize = 0x800;
  var pMask = 0x7ff;

  var X = 0x00;
  var Y = 0x08;
  var Z = 0x10;
  var W = 0x18;

  var XI = 0x0;
  var YI = 0x4;
  var ZI = 0x8;
  var WI = 0xc;

  var contribution2D = 0x18; // 2 * 8 bytes + 2 * 4 bytes
  var contribution3D = 0x28; // 3 * 8 bytes + 3 * 4 bytes
  var contribution4D = 0x30; // 4 * 8 bytes + 4 * 4 bytes

  var perm = 0x0; // 2048 permutations * 2 byte

  var stretchConstant2D = 0x1000;
  var stretchConstant3D = 0x1008;
  var stretchConstant4D = 0x1010;

  var squishConstant2D = 0x1018;
  var squishConstant3D = 0x1020;
  var squishConstant4D = 0x1028;

  var gradients2D = 0x01030; // 2048 gradients * 2 dimensions * 8 bytes
  var gradients3D = 0x09030; // 2048 gradients * 3 dimensions * 8 bytes
  var gradients4D = 0x15030; // 2048 gradients * 4 dimensions * 8 bytes

  var lookUp2D = 0x25030; // 64 * 4 bytes
  var contributions2D = 0x25130; // 24 * (2 * 8 bytes + 2 * 4 bytes)

  var lookUp3D = 0x25370; // 2048 * 4 bytes
  var contributions3D = 0x27370; // 24 * (3 * 4 bytes + 3 * 8 bytes) * 8

  var lookUp4D = 0x29230; // 2048 * 4 bytes
  var contributions4D = 0x429230; // 24 * (3 * 4 bytes + 3 * 8 bytes) * 8

  function normalize(n) {
    n = +n;
    return (n + 1.0) / 2.0;
  }

  function setSeed(value) {
    value = +value;
    var i = 0;
    var r = 0;
    var temp = 0;

    _setSeed(value);

    for (i = 0; (i | 0) < (pSize | 0); i = (i + 1) | 0) {
      heapU16[(perm + (i << 1)) >> 1] = i;
    }
    for (i = 0; (i | 0) < (pSize | 0); i = (i + 1) | 0) {
      r = (nextU32() | 0) & pMask;
      temp = getPerm(i) | 0;
      heapU16[(perm + (i << 1)) >> 1] = getPerm(r) | 0;
      heapU16[(perm + (r << 1)) >> 1] = temp;
    }
  }

  function getPerm(i) {
    i = i | 0;
    return heapU16[(perm + (i << 1)) >> 1] | 0;
  }

  function noise2D(octaves, lacunarity, persistence, xOffset, yOffset, x, y) {
    octaves = octaves | 0;
    lacunarity = +lacunarity;
    persistence = +persistence;
    xOffset = +xOffset;
    yOffset = +yOffset;
    x = +x;
    y = +y;
    var total = 0.0;
    var frequency = 1.0;
    var amplitude = 1.0;
    var max = 0.0;
    var i = 0;
    for (i = 0; (i | 0) < (octaves | 0); i = (i + 1) | 0) {
      total = total + +eval2D(x * frequency, y * frequency) * amplitude;
      max = max + amplitude;
      frequency = frequency * lacunarity;
      amplitude = amplitude * persistence;
      x = x + xOffset;
      y = y + yOffset;
    }
    return total / max;
  }

  function grad2D(xsb, ysb, dx, dy) {
    xsb = xsb | 0;
    ysb = ysb | 0;
    dx = +dx;
    dy = +dy;
    var i = 0;
    i = (getPerm(xsb & pMask) | 0) ^ (ysb & pMask);
    i = getPerm(i) | 0;
    return +heapF64[(gradients2D + (i << 4) + X) >> 3] * dx + +heapF64[(gradients2D + (i << 4) + Y) >> 3] * dy;
  }

  function eval2D(x, y) {
    x = +x;
    y = +y;
    var stretchOffset = 0.0;
    var xs = 0.0;
    var ys = 0.0;
    var xsb = 0;
    var ysb = 0;
    var xins = 0.0;
    var yins = 0.0;
    var inSum = 0.0;
    var squishOffsetIns = 0.0;
    var dx0 = 0.0;
    var dy0 = 0.0;
    var hash = 0;
    var offset = 0;
    var i = 0;
    var c = 0;
    var dx = 0.0;
    var dy = 0.0;
    var px = 0;
    var py = 0;
    var attn = 0.0;
    var value = 0.0;

    stretchOffset = (x + y) * heapF64[stretchConstant2D >> 3];
    xs = x + stretchOffset;
    ys = y + stretchOffset;

    xsb = ~~floor(xs);
    ysb = ~~floor(ys);

    xins = xs - +(xsb | 0);
    yins = ys - +(ysb | 0);

    inSum = xins + yins;

    squishOffsetIns = inSum * heapF64[squishConstant2D >> 3];
    dx0 = xins + squishOffsetIns;
    dy0 = yins + squishOffsetIns;

    // prettier-ignore
    hash = 
      ~~floor(xins - yins + 1.0) |
      (~~floor(inSum) << 1) |
      (~~floor(inSum + yins) << 2) |
      (~~floor(inSum + xins) << 4);

    offset = imul(contribution2D, heapU32[(lookUp2D + (hash << 2)) >> 2] | 0) << 2;

    for (i = 0; (i | 0) < 4; i = (i + 1) | 0) {
      c = imul(contribution2D, i);
      dx = dx0 + +heapF64[(contributions2D + offset + c + X) >> 3];
      dy = dy0 + +heapF64[(contributions2D + offset + c + Y) >> 3];
      attn = 2.0 - dx * dx - dy * dy;
      if (attn > 0.0) {
        px = xsb + heapI32[(contributions2D + offset + c + 0x10 + XI) >> 2];
        py = ysb + heapI32[(contributions2D + offset + c + 0x10 + YI) >> 2];

        attn = attn * attn;
        value = value + attn * attn * +grad2D(px, py, dx, dy);
      }
    }
    return +normalize(value);
  }

  function noise3D(octaves, lacunarity, persistence, xOffset, yOffset, zOffset, x, y, z) {
    octaves = octaves | 0;
    lacunarity = +lacunarity;
    persistence = +persistence;
    xOffset = +xOffset;
    yOffset = +yOffset;
    zOffset = +zOffset;
    x = +x;
    y = +y;
    z = +z;
    var total = 0.0;
    var frequency = 1.0;
    var amplitude = 1.0;
    var max = 0.0;
    var i = 0;
    for (i = 0; (i | 0) < (octaves | 0); i = (i + 1) | 0) {
      total = total + +eval3D(x * frequency, y * frequency, z * frequency) * amplitude;
      max = max + amplitude;
      frequency = frequency * lacunarity;
      amplitude = amplitude * persistence;
      x = x + xOffset;
      y = y + yOffset;
      z = z + yOffset;
    }
    return total / max;
  }

  function eval3D(x, y, z) {
    x = +x;
    y = +y;
    z = +z;
    var stretchOffset = 0.0;
    var xs = 0.0;
    var ys = 0.0;
    var zs = 0.0;

    stretchOffset = (x + y + z) * heapF64[stretchConstant3D >> 3];
    xs = x + stretchOffset;
    ys = y + stretchOffset;
    zs = z + stretchOffset;

    return +eval3DBase(xs, ys, zs);
  }

  // function eval3DXYBeforeZ(x, y, z) {
  //   x = +x;
  //   y = +y;
  //   z = +z;
  //   var xy = 0.0;
  //   var s2 = 0.0;
  //   var zz = 0.0;
  //   var xs = 0.0;
  //   var ys = 0.0;
  //   var zs = 0.0;
  //   xy = x + y;
  //   s2 = xy * -heapF64[stretchConstant2D >> 3];
  //   zz = z * 0.288675134594813;
  //   xs = s2 - x + zz;
  //   ys = s2 - y + zz;
  //   zs = xy * 0.577350269189626 + zz;

  //   return +eval3DBase(xs, ys, zs);
  // }

  // function eval3DXZBeforeY(x, y, z) {
  //   x = +x;
  //   y = +y;
  //   z = +z;
  //   var xz = 0.0;
  //   var s2 = 0.0;
  //   var yy = 0.0;
  //   var xs = 0.0;
  //   var ys = 0.0;
  //   var zs = 0.0;
  //   xz = x + z;
  //   s2 = xz * -heapF64[stretchConstant2D >> 3];
  //   yy = y * 0.288675134594813;
  //   xs = s2 - x + yy;
  //   ys = xz * 0.577350269189626 + yy;
  //   zs = s2 - z + yy;

  //   return +eval3DBase(xs, ys, zs);
  // }

  function grad3D(xsb, ysb, zsb, dx, dy, dz) {
    xsb = xsb | 0;
    ysb = ysb | 0;
    zsb = zsb | 0;
    dx = +dx;
    dy = +dy;
    dz = +dz;
    var i = 0;
    i = (getPerm(xsb & pMask) | 0) ^ (ysb & pMask);
    i = (getPerm(i) | 0) ^ (zsb & pMask);
    i = getPerm(i) | 0;
    i = imul(i, 3);
    return (
      +heapF64[(gradients3D + (i << 3) + X) >> 3] * dx +
      +heapF64[(gradients3D + (i << 3) + Y) >> 3] * dy +
      +heapF64[(gradients3D + (i << 3) + Z) >> 3] * dz
    );
  }

  function eval3DBase(xs, ys, zs) {
    xs = +xs;
    ys = +ys;
    zs = +zs;
    var xsb = 0;
    var ysb = 0;
    var zsb = 0;
    var xins = 0.0;
    var yins = 0.0;
    var zins = 0.0;
    var inSum = 0.0;
    var squishOffsetIns = 0.0;
    var dx0 = 0.0;
    var dy0 = 0.0;
    var dz0 = 0.0;
    var hash = 0;
    var offset = 0;
    var length = 0;
    var i = 0;
    var c = 0;
    var dx = 0.0;
    var dy = 0.0;
    var dz = 0.0;
    var px = 0;
    var py = 0;
    var pz = 0;
    var attn = 0.0;
    var value = 0.0;

    xsb = ~~floor(xs);
    ysb = ~~floor(ys);
    zsb = ~~floor(zs);

    xins = xs - +(xsb | 0);
    yins = ys - +(ysb | 0);
    zins = zs - +(zsb | 0);

    inSum = xins + yins + zins;

    squishOffsetIns = inSum * heapF64[squishConstant3D >> 3];
    dx0 = xins + squishOffsetIns;
    dy0 = yins + squishOffsetIns;
    dz0 = zins + squishOffsetIns;

    hash =
      ~~floor(yins - zins + 1.0) |
      (~~floor(xins - yins + 1.0) << 1) |
      (~~floor(xins - zins + 1.0) << 2) |
      (~~floor(inSum) << 3) |
      (~~floor(inSum + zins) << 5) |
      (~~floor(inSum + yins) << 7) |
      (~~floor(inSum + xins) << 9);

    offset = imul((1 + contribution3D) | 0, heapU32[(lookUp3D + (hash << 2)) >> 2] | 0) << 3;
    length = heapU32[(contributions3D + offset) >> 2] | 0;
    offset = (offset + 0x8) | 0;

    for (i = 0; (i | 0) < (length | 0); i = (i + 1) | 0) {
      c = imul(contribution3D, i);
      dx = dx0 + +heapF64[(contributions3D + offset + c + X) >> 3];
      dy = dy0 + +heapF64[(contributions3D + offset + c + Y) >> 3];
      dz = dz0 + +heapF64[(contributions3D + offset + c + Z) >> 3];
      attn = 2.0 - dx * dx - dy * dy - dz * dz;
      if (attn > 0.0) {
        px = xsb + heapI32[(contributions3D + offset + c + 0x18 + XI) >> 2];
        py = ysb + heapI32[(contributions3D + offset + c + 0x18 + YI) >> 2];
        pz = zsb + heapI32[(contributions3D + offset + c + 0x18 + ZI) >> 2];

        attn = attn * attn;
        value = value + attn * attn * +grad3D(px, py, pz, dx, dy, dz);
      }
    }
    return +normalize(value);
  }

  function noise4D(octaves, lacunarity, persistence, xOffset, yOffset, zOffset, wOffset, x, y, z, w) {
    octaves = octaves | 0;
    lacunarity = +lacunarity;
    persistence = +persistence;
    xOffset = +xOffset;
    yOffset = +yOffset;
    zOffset = +zOffset;
    wOffset = +wOffset;
    x = +x;
    y = +y;
    z = +z;
    w = +w;
    var total = 0.0;
    var frequency = 1.0;
    var amplitude = 1.0;
    var max = 0.0;
    var i = 0;
    for (i = 0; (i | 0) < (octaves | 0); i = (i + 1) | 0) {
      total = total + +eval4D(x * frequency, y * frequency, z * frequency, w * frequency) * amplitude;
      max = max + amplitude;
      frequency = frequency * lacunarity;
      amplitude = amplitude * persistence;
      x = x + xOffset;
      y = y + yOffset;
      z = z + yOffset;
      w = w + yOffset;
    }
    return total / max;
  }

  function eval4D(x, y, z, w) {
    x = +x;
    y = +y;
    z = +z;
    w = +w;
    var stretchOffset = 0.0;
    var xs = 0.0;
    var ys = 0.0;
    var zs = 0.0;
    var ws = 0.0;

    stretchOffset = (x + y + z + w) * heapF64[stretchConstant4D >> 3];
    xs = x + stretchOffset;
    ys = y + stretchOffset;
    zs = z + stretchOffset;
    ws = w + stretchOffset;

    return +eval4DBase(xs, ys, zs, ws);
  }

  // function eval4DXYBeforeZW(x, y, z, w) {
  //   x = +x;
  //   y = +y;
  //   z = +z;
  //   w = +w;
  //   var s2 = 0.0;
  //   var t2 = 0.0;
  //   var xs = 0.0;
  //   var ys = 0.0;
  //   var zs = 0.0;
  //   var ws = 0.0;

  //   s2 = (x + y) * -0.178275657951399372 + (z + w) * 0.215623393288842828;
  //   t2 = (z + w) * -0.403949762580207112 + (x + y) * -0.375199083010075342;
  //   xs = x + s2;
  //   ys = y + s2;
  //   zs = z + t2;
  //   ws = w + t2;

  //   return +eval4DBase(xs, ys, zs, ws);
  // }

  // function eval4DXZBeforeYW(x, y, z, w) {
  //   x = +x;
  //   y = +y;
  //   z = +z;
  //   w = +w;
  //   var s2 = 0.0;
  //   var t2 = 0.0;
  //   var xs = 0.0;
  //   var ys = 0.0;
  //   var zs = 0.0;
  //   var ws = 0.0;

  //   s2 = (x + z) * -0.178275657951399372 + (y + w) * 0.215623393288842828;
  //   t2 = (y + w) * -0.403949762580207112 + (x + z) * -0.375199083010075342;
  //   xs = x + s2;
  //   ys = y + t2;
  //   zs = z + s2;
  //   ws = w + t2;

  //   return +eval4DBase(xs, ys, zs, ws);
  // }

  // function eval4DXYZBeforeW(x, y, z, w) {
  //   x = +x;
  //   y = +y;
  //   z = +z;
  //   w = +w;
  //   var xyz = 0.0;
  //   var ww = 0.0;
  //   var s2 = 0.0;
  //   var xs = 0.0;
  //   var ys = 0.0;
  //   var zs = 0.0;
  //   var ws = 0.0;

  //   xyz = x + y + z;
  //   ww = w * 0.2236067977499788;
  //   s2 = xyz * heapF64[stretchConstant3D >> 3] + ww;
  //   xs = x + s2;
  //   ys = y + s2;
  //   zs = z + s2;
  //   ws = -0.5 * xyz + ww;

  //   return +eval4DBase(xs, ys, zs, ws);
  // }

  function grad4D(xsb, ysb, zsb, wsb, dx, dy, dz, dw) {
    xsb = xsb | 0;
    ysb = ysb | 0;
    zsb = zsb | 0;
    wsb = wsb | 0;
    dx = +dx;
    dy = +dy;
    dz = +dz;
    dw = +dw;
    var i = 0;
    i = (getPerm(xsb & pMask) | 0) ^ (ysb & pMask);
    i = (getPerm(i) | 0) ^ (zsb & pMask);
    i = (getPerm(i) | 0) ^ (wsb & pMask);
    i = getPerm(i) | 0;
    return (
      +heapF64[(gradients4D + (i << 5) + X) >> 3] * dx +
      +heapF64[(gradients4D + (i << 5) + Y) >> 3] * dy +
      +heapF64[(gradients4D + (i << 5) + Z) >> 3] * dz +
      +heapF64[(gradients4D + (i << 5) + W) >> 3] * dw
    );
  }

  function eval4DBase(xs, ys, zs, ws) {
    xs = +xs;
    ys = +ys;
    zs = +zs;
    ws = +ws;
    var xsb = 0;
    var ysb = 0;
    var zsb = 0;
    var wsb = 0;
    var xins = 0.0;
    var yins = 0.0;
    var zins = 0.0;
    var wins = 0.0;
    var inSum = 0.0;
    var squishOffsetIns = 0.0;
    var dx0 = 0.0;
    var dy0 = 0.0;
    var dz0 = 0.0;
    var dw0 = 0.0;
    var hash = 0;
    var offset = 0;
    var length = 0;
    var i = 0;
    var c = 0;
    var dx = 0.0;
    var dy = 0.0;
    var dz = 0.0;
    var dw = 0.0;
    var px = 0;
    var py = 0;
    var pz = 0;
    var pw = 0;
    var attn = 0.0;
    var value = 0.0;

    xsb = ~~floor(xs);
    ysb = ~~floor(ys);
    zsb = ~~floor(zs);
    wsb = ~~floor(ws);

    xins = xs - +(xsb | 0);
    yins = ys - +(ysb | 0);
    zins = zs - +(zsb | 0);
    wins = ws - +(wsb | 0);

    inSum = xins + yins + zins + wins;

    squishOffsetIns = inSum * heapF64[squishConstant4D >> 3];
    dx0 = xins + squishOffsetIns;
    dy0 = yins + squishOffsetIns;
    dz0 = zins + squishOffsetIns;
    dw0 = wins + squishOffsetIns;

    hash =
      ~~floor(zins - wins + 1.0) |
      (~~floor(yins - zins + 1.0) << 1) |
      (~~floor(yins - wins + 1.0) << 2) |
      (~~floor(xins - yins + 1.0) << 3) |
      (~~floor(xins - zins + 1.0) << 4) |
      (~~floor(xins - wins + 1.0) << 5) |
      (~~floor(inSum) << 6) |
      (~~floor(inSum + wins) << 8) |
      (~~floor(inSum + zins) << 11) |
      (~~floor(inSum + yins) << 14) |
      (~~floor(inSum + xins) << 17);

    offset = imul((1 + (contribution4D << 1)) | 0, heapU32[(lookUp4D + (hash << 2)) >> 2] | 0) << 3;
    length = heapU32[(contributions4D + offset) >> 2] | 0;
    offset = (offset + 0x8) | 0;

    for (i = 0; (i | 0) < (length | 0); i = (i + 1) | 0) {
      c = imul(contribution4D, i);
      dx = dx0 + +heapF64[(contributions4D + offset + c + X) >> 3];
      dy = dy0 + +heapF64[(contributions4D + offset + c + Y) >> 3];
      dz = dz0 + +heapF64[(contributions4D + offset + c + Z) >> 3];
      dw = dw0 + +heapF64[(contributions4D + offset + c + W) >> 3];
      attn = 2.0 - dx * dx - dy * dy - dz * dz - dw * dw;
      if (attn > 0.0) {
        px = xsb + heapI32[(contributions4D + offset + c + 0x20 + XI) >> 2];
        py = ysb + heapI32[(contributions4D + offset + c + 0x20 + YI) >> 2];
        pz = zsb + heapI32[(contributions4D + offset + c + 0x20 + ZI) >> 2];
        pw = wsb + heapI32[(contributions4D + offset + c + 0x20 + WI) >> 2];

        attn = attn * attn;
        value = value + attn * attn * +grad4D(px, py, pz, pw, dx, dy, dz, dw);
      }
    }
    return +normalize(value);
  }

  return {
    setSeed: setSeed,
    noise2D: noise2D,
    noise3D: noise4D,
    noise4D: noise4D,
  };
}

const heap = new ArrayBuffer(0x1000000);

// set constants
{
  const heapF64 = new Float64Array(heap, 0x800 * 2);
  heapF64[0 + 0] = (1 / Math.sqrt(2 + 1) - 1) / 2; // stretch constant 2d
  heapF64[3 + 0] = (Math.sqrt(2 + 1) - 1) / 2; // squish constant 2d
  heapF64[0 + 1] = (1 / Math.sqrt(3 + 1) - 1) / 3; // stretch constant 3d
  heapF64[3 + 1] = (Math.sqrt(3 + 1) - 1) / 3; // squish constant 3d
  heapF64[0 + 2] = (1 / Math.sqrt(4 + 1) - 1) / 4; // stretch constant 4d
  heapF64[3 + 2] = (Math.sqrt(4 + 1) - 1) / 4; // squish constant 4d
}

// create gradients
{
  const heapF64 = new Float64Array(heap, 0x800 * 2 + 6 * 0x8);

  let offset = 0;
  {
    // prettier-ignore
    const gradients2D = [
      0.130526192220052, 0.99144486137381,
      0.38268343236509, 0.923879532511287,
      0.608761429008721, 0.793353340291235,
      0.793353340291235, 0.608761429008721,
      0.923879532511287, 0.38268343236509,
      0.99144486137381, 0.130526192220051,
      0.99144486137381, -0.130526192220051,
      0.923879532511287, -0.38268343236509,
      0.793353340291235, -0.60876142900872,
      0.608761429008721, -0.793353340291235,
      0.38268343236509, -0.923879532511287,
      0.130526192220052, -0.99144486137381,
      -0.130526192220052, -0.99144486137381,
      -0.38268343236509, -0.923879532511287,
      -0.608761429008721, -0.793353340291235,
      -0.793353340291235, -0.608761429008721,
      -0.923879532511287, -0.38268343236509,
      -0.99144486137381, -0.130526192220052,
      -0.99144486137381, 0.130526192220051,
      -0.923879532511287, 0.38268343236509,
      -0.793353340291235, 0.608761429008721,
      -0.608761429008721, 0.793353340291235,
      -0.38268343236509, 0.923879532511287,
      -0.130526192220052, 0.99144486137381,
    ].map((n) => n / 7.69084574549313);

    for (let i = 0; i < 2 * 0x800; i++) {
      heapF64[offset + i] = gradients2D[i % gradients2D.length];
    }
    offset += 2 * 0x800;
  }

  {
    // prettier-ignore
    const gradients3D = [
      -1.4082482904633333,  -1.4082482904633333,  -2.6329931618533333,
      -0.07491495712999985,  -0.07491495712999985,  -3.29965982852,
      0.24732126143473554,  -1.6667938651159684,  -2.838945207362466,
      -1.6667938651159684,  0.24732126143473554,  -2.838945207362466,
      -1.4082482904633333,  -2.6329931618533333,  -1.4082482904633333,
      -0.07491495712999985,  -3.29965982852,  -0.07491495712999985,
      -1.6667938651159684,  -2.838945207362466,  0.24732126143473554,
      0.24732126143473554,  -2.838945207362466,  -1.6667938651159684,
      1.5580782047233335,  0.33333333333333337,  -2.8914115380566665,
      2.8914115380566665,  -0.33333333333333337,  -1.5580782047233335,
      1.8101897177633992,  -1.2760767510338025,  -2.4482280932803,
      2.4482280932803,  1.2760767510338025,  -1.8101897177633992,
      1.5580782047233335,  -2.8914115380566665,  0.33333333333333337,
      2.8914115380566665,  -1.5580782047233335,  -0.33333333333333337,
      2.4482280932803,  -1.8101897177633992,  1.2760767510338025,
      1.8101897177633992,  -2.4482280932803,  -1.2760767510338025,
      -2.6329931618533333,  -1.4082482904633333,  -1.4082482904633333,
      -3.29965982852,  -0.07491495712999985,  -0.07491495712999985,
      -2.838945207362466,  0.24732126143473554,  -1.6667938651159684,
      -2.838945207362466,  -1.6667938651159684,  0.24732126143473554,
      0.33333333333333337,  1.5580782047233335,  -2.8914115380566665,
      -0.33333333333333337,  2.8914115380566665,  -1.5580782047233335,
      1.2760767510338025,  2.4482280932803,  -1.8101897177633992,
      -1.2760767510338025,  1.8101897177633992,  -2.4482280932803,
      0.33333333333333337,  -2.8914115380566665,  1.5580782047233335,
      -0.33333333333333337,  -1.5580782047233335,  2.8914115380566665,
      -1.2760767510338025,  -2.4482280932803,  1.8101897177633992,
      1.2760767510338025,  -1.8101897177633992,  2.4482280932803,
      3.29965982852,  0.07491495712999985,  0.07491495712999985,
      2.6329931618533333,  1.4082482904633333,  1.4082482904633333,
      2.838945207362466,  -0.24732126143473554,  1.6667938651159684,
      2.838945207362466,  1.6667938651159684,  -0.24732126143473554,
      -2.8914115380566665,  1.5580782047233335,  0.33333333333333337,
      -1.5580782047233335,  2.8914115380566665,  -0.33333333333333337,
      -2.4482280932803,  1.8101897177633992,  -1.2760767510338025,
      -1.8101897177633992,  2.4482280932803,  1.2760767510338025,
      -2.8914115380566665,  0.33333333333333337,  1.5580782047233335,
      -1.5580782047233335,  -0.33333333333333337,  2.8914115380566665,
      -1.8101897177633992,  1.2760767510338025,  2.4482280932803,
      -2.4482280932803,  -1.2760767510338025,  1.8101897177633992,
      0.07491495712999985,  3.29965982852,  0.07491495712999985,
      1.4082482904633333,  2.6329931618533333,  1.4082482904633333,
      1.6667938651159684,  2.838945207362466,  -0.24732126143473554,
      -0.24732126143473554,  2.838945207362466,  1.6667938651159684,
      0.07491495712999985,  0.07491495712999985,  3.29965982852,
      1.4082482904633333,  1.4082482904633333,  2.6329931618533333,
      -0.24732126143473554,  1.6667938651159684,  2.838945207362466,
      1.6667938651159684,  -0.24732126143473554,  2.838945207362466
    ].map((n) => n / 26.92263139946168);

    for (let i = 0; i < 3 * 0x800; i++) {
      heapF64[offset + i] = gradients3D[i % gradients3D.length];
    }
    offset += 3 * 0x800;
  }

  {
    // prettier-ignore
    const gradients4D = [
      -0.753341017856078, -0.37968289875261624, -0.37968289875261624, -0.37968289875261624,
      -0.7821684431180708, -0.4321472685365301, -0.4321472685365301, 0.12128480194602098,
      -0.7821684431180708, -0.4321472685365301, 0.12128480194602098, -0.4321472685365301,
      -0.7821684431180708, 0.12128480194602098, -0.4321472685365301, -0.4321472685365301,
      -0.8586508742123365, -0.508629699630796, 0.044802370851755174, 0.044802370851755174,
      -0.8586508742123365, 0.044802370851755174, -0.508629699630796, 0.044802370851755174,
      -0.8586508742123365, 0.044802370851755174, 0.044802370851755174, -0.508629699630796,
      -0.9982828964265062, -0.03381941603233842, -0.03381941603233842, -0.03381941603233842,
      -0.37968289875261624, -0.753341017856078, -0.37968289875261624, -0.37968289875261624,
      -0.4321472685365301, -0.7821684431180708, -0.4321472685365301, 0.12128480194602098,
      -0.4321472685365301, -0.7821684431180708, 0.12128480194602098, -0.4321472685365301,
      0.12128480194602098, -0.7821684431180708, -0.4321472685365301, -0.4321472685365301,
      -0.508629699630796, -0.8586508742123365, 0.044802370851755174, 0.044802370851755174,
      0.044802370851755174, -0.8586508742123365, -0.508629699630796, 0.044802370851755174,
      0.044802370851755174, -0.8586508742123365, 0.044802370851755174, -0.508629699630796,
      -0.03381941603233842, -0.9982828964265062, -0.03381941603233842, -0.03381941603233842,
      -0.37968289875261624, -0.37968289875261624, -0.753341017856078, -0.37968289875261624,
      -0.4321472685365301, -0.4321472685365301, -0.7821684431180708, 0.12128480194602098,
      -0.4321472685365301, 0.12128480194602098, -0.7821684431180708, -0.4321472685365301,
      0.12128480194602098, -0.4321472685365301, -0.7821684431180708, -0.4321472685365301,
      -0.508629699630796, 0.044802370851755174, -0.8586508742123365, 0.044802370851755174,
      0.044802370851755174, -0.508629699630796, -0.8586508742123365, 0.044802370851755174,
      0.044802370851755174, 0.044802370851755174, -0.8586508742123365, -0.508629699630796,
      -0.03381941603233842, -0.03381941603233842, -0.9982828964265062, -0.03381941603233842,
      -0.37968289875261624, -0.37968289875261624, -0.37968289875261624, -0.753341017856078,
      -0.4321472685365301, -0.4321472685365301, 0.12128480194602098, -0.7821684431180708,
      -0.4321472685365301, 0.12128480194602098, -0.4321472685365301, -0.7821684431180708,
      0.12128480194602098, -0.4321472685365301, -0.4321472685365301, -0.7821684431180708,
      -0.508629699630796, 0.044802370851755174, 0.044802370851755174, -0.8586508742123365,
      0.044802370851755174, -0.508629699630796, 0.044802370851755174, -0.8586508742123365,
      0.044802370851755174, 0.044802370851755174, -0.508629699630796, -0.8586508742123365,
      -0.03381941603233842, -0.03381941603233842, -0.03381941603233842, -0.9982828964265062,
      -0.6740059517812944, -0.3239847771997537, -0.3239847771997537, 0.5794684678643381,
      -0.7504883828755602, -0.4004672082940195, 0.15296486218853164, 0.5029860367700724,
      -0.7504883828755602, 0.15296486218853164, -0.4004672082940195, 0.5029860367700724,
      -0.8828161875373585, 0.08164729285680945, 0.08164729285680945, 0.4553054119602712,
      -0.4553054119602712, -0.08164729285680945, -0.08164729285680945, 0.8828161875373585,
      -0.5029860367700724, -0.15296486218853164, 0.4004672082940195, 0.7504883828755602,
      -0.5029860367700724, 0.4004672082940195, -0.15296486218853164, 0.7504883828755602,
      -0.5794684678643381, 0.3239847771997537, 0.3239847771997537, 0.6740059517812944,
      -0.3239847771997537, -0.6740059517812944, -0.3239847771997537, 0.5794684678643381,
      -0.4004672082940195, -0.7504883828755602, 0.15296486218853164, 0.5029860367700724,
      0.15296486218853164, -0.7504883828755602, -0.4004672082940195, 0.5029860367700724,
      0.08164729285680945, -0.8828161875373585, 0.08164729285680945, 0.4553054119602712,
      -0.08164729285680945, -0.4553054119602712, -0.08164729285680945, 0.8828161875373585,
      -0.15296486218853164, -0.5029860367700724, 0.4004672082940195, 0.7504883828755602,
      0.4004672082940195, -0.5029860367700724, -0.15296486218853164, 0.7504883828755602,
      0.3239847771997537, -0.5794684678643381, 0.3239847771997537, 0.6740059517812944,
      -0.3239847771997537, -0.3239847771997537, -0.6740059517812944, 0.5794684678643381,
      -0.4004672082940195, 0.15296486218853164, -0.7504883828755602, 0.5029860367700724,
      0.15296486218853164, -0.4004672082940195, -0.7504883828755602, 0.5029860367700724,
      0.08164729285680945, 0.08164729285680945, -0.8828161875373585, 0.4553054119602712,
      -0.08164729285680945, -0.08164729285680945, -0.4553054119602712, 0.8828161875373585,
      -0.15296486218853164, 0.4004672082940195, -0.5029860367700724, 0.7504883828755602,
      0.4004672082940195, -0.15296486218853164, -0.5029860367700724, 0.7504883828755602,
      0.3239847771997537, 0.3239847771997537, -0.5794684678643381, 0.6740059517812944,
      -0.6740059517812944, -0.3239847771997537, 0.5794684678643381, -0.3239847771997537,
      -0.7504883828755602, -0.4004672082940195, 0.5029860367700724, 0.15296486218853164,
      -0.7504883828755602, 0.15296486218853164, 0.5029860367700724, -0.4004672082940195,
      -0.8828161875373585, 0.08164729285680945, 0.4553054119602712, 0.08164729285680945,
      -0.4553054119602712, -0.08164729285680945, 0.8828161875373585, -0.08164729285680945,
      -0.5029860367700724, -0.15296486218853164, 0.7504883828755602, 0.4004672082940195,
      -0.5029860367700724, 0.4004672082940195, 0.7504883828755602, -0.15296486218853164,
      -0.5794684678643381, 0.3239847771997537, 0.6740059517812944, 0.3239847771997537,
      -0.3239847771997537, -0.6740059517812944, 0.5794684678643381, -0.3239847771997537,
      -0.4004672082940195, -0.7504883828755602, 0.5029860367700724, 0.15296486218853164,
      0.15296486218853164, -0.7504883828755602, 0.5029860367700724, -0.4004672082940195,
      0.08164729285680945, -0.8828161875373585, 0.4553054119602712, 0.08164729285680945,
      -0.08164729285680945, -0.4553054119602712, 0.8828161875373585, -0.08164729285680945,
      -0.15296486218853164, -0.5029860367700724, 0.7504883828755602, 0.4004672082940195,
      0.4004672082940195, -0.5029860367700724, 0.7504883828755602, -0.15296486218853164,
      0.3239847771997537, -0.5794684678643381, 0.6740059517812944, 0.3239847771997537,
      -0.3239847771997537, -0.3239847771997537, 0.5794684678643381, -0.6740059517812944,
      -0.4004672082940195, 0.15296486218853164, 0.5029860367700724, -0.7504883828755602,
      0.15296486218853164, -0.4004672082940195, 0.5029860367700724, -0.7504883828755602,
      0.08164729285680945, 0.08164729285680945, 0.4553054119602712, -0.8828161875373585,
      -0.08164729285680945, -0.08164729285680945, 0.8828161875373585, -0.4553054119602712,
      -0.15296486218853164, 0.4004672082940195, 0.7504883828755602, -0.5029860367700724,
      0.4004672082940195, -0.15296486218853164, 0.7504883828755602, -0.5029860367700724,
      0.3239847771997537, 0.3239847771997537, 0.6740059517812944, -0.5794684678643381,
      -0.6740059517812944, 0.5794684678643381, -0.3239847771997537, -0.3239847771997537,
      -0.7504883828755602, 0.5029860367700724, -0.4004672082940195, 0.15296486218853164,
      -0.7504883828755602, 0.5029860367700724, 0.15296486218853164, -0.4004672082940195,
      -0.8828161875373585, 0.4553054119602712, 0.08164729285680945, 0.08164729285680945,
      -0.4553054119602712, 0.8828161875373585, -0.08164729285680945, -0.08164729285680945,
      -0.5029860367700724, 0.7504883828755602, -0.15296486218853164, 0.4004672082940195,
      -0.5029860367700724, 0.7504883828755602, 0.4004672082940195, -0.15296486218853164,
      -0.5794684678643381, 0.6740059517812944, 0.3239847771997537, 0.3239847771997537,
      -0.3239847771997537, 0.5794684678643381, -0.6740059517812944, -0.3239847771997537,
      -0.4004672082940195, 0.5029860367700724, -0.7504883828755602, 0.15296486218853164,
      0.15296486218853164, 0.5029860367700724, -0.7504883828755602, -0.4004672082940195,
      0.08164729285680945, 0.4553054119602712, -0.8828161875373585, 0.08164729285680945,
      -0.08164729285680945, 0.8828161875373585, -0.4553054119602712, -0.08164729285680945,
      -0.15296486218853164, 0.7504883828755602, -0.5029860367700724, 0.4004672082940195,
      0.4004672082940195, 0.7504883828755602, -0.5029860367700724, -0.15296486218853164,
      0.3239847771997537, 0.6740059517812944, -0.5794684678643381, 0.3239847771997537,
      -0.3239847771997537, 0.5794684678643381, -0.3239847771997537, -0.6740059517812944,
      -0.4004672082940195, 0.5029860367700724, 0.15296486218853164, -0.7504883828755602,
      0.15296486218853164, 0.5029860367700724, -0.4004672082940195, -0.7504883828755602,
      0.08164729285680945, 0.4553054119602712, 0.08164729285680945, -0.8828161875373585,
      -0.08164729285680945, 0.8828161875373585, -0.08164729285680945, -0.4553054119602712,
      -0.15296486218853164, 0.7504883828755602, 0.4004672082940195, -0.5029860367700724,
      0.4004672082940195, 0.7504883828755602, -0.15296486218853164, -0.5029860367700724,
      0.3239847771997537, 0.6740059517812944, 0.3239847771997537, -0.5794684678643381,
      0.5794684678643381, -0.6740059517812944, -0.3239847771997537, -0.3239847771997537,
      0.5029860367700724, -0.7504883828755602, -0.4004672082940195, 0.15296486218853164,
      0.5029860367700724, -0.7504883828755602, 0.15296486218853164, -0.4004672082940195,
      0.4553054119602712, -0.8828161875373585, 0.08164729285680945, 0.08164729285680945,
      0.8828161875373585, -0.4553054119602712, -0.08164729285680945, -0.08164729285680945,
      0.7504883828755602, -0.5029860367700724, -0.15296486218853164, 0.4004672082940195,
      0.7504883828755602, -0.5029860367700724, 0.4004672082940195, -0.15296486218853164,
      0.6740059517812944, -0.5794684678643381, 0.3239847771997537, 0.3239847771997537,
      0.5794684678643381, -0.3239847771997537, -0.6740059517812944, -0.3239847771997537,
      0.5029860367700724, -0.4004672082940195, -0.7504883828755602, 0.15296486218853164,
      0.5029860367700724, 0.15296486218853164, -0.7504883828755602, -0.4004672082940195,
      0.4553054119602712, 0.08164729285680945, -0.8828161875373585, 0.08164729285680945,
      0.8828161875373585, -0.08164729285680945, -0.4553054119602712, -0.08164729285680945,
      0.7504883828755602, -0.15296486218853164, -0.5029860367700724, 0.4004672082940195,
      0.7504883828755602, 0.4004672082940195, -0.5029860367700724, -0.15296486218853164,
      0.6740059517812944, 0.3239847771997537, -0.5794684678643381, 0.3239847771997537,
      0.5794684678643381, -0.3239847771997537, -0.3239847771997537, -0.6740059517812944,
      0.5029860367700724, -0.4004672082940195, 0.15296486218853164, -0.7504883828755602,
      0.5029860367700724, 0.15296486218853164, -0.4004672082940195, -0.7504883828755602,
      0.4553054119602712, 0.08164729285680945, 0.08164729285680945, -0.8828161875373585,
      0.8828161875373585, -0.08164729285680945, -0.08164729285680945, -0.4553054119602712,
      0.7504883828755602, -0.15296486218853164, 0.4004672082940195, -0.5029860367700724,
      0.7504883828755602, 0.4004672082940195, -0.15296486218853164, -0.5029860367700724,
      0.6740059517812944, 0.3239847771997537, 0.3239847771997537, -0.5794684678643381,
      0.03381941603233842, 0.03381941603233842, 0.03381941603233842, 0.9982828964265062,
      -0.044802370851755174, -0.044802370851755174, 0.508629699630796, 0.8586508742123365,
      -0.044802370851755174, 0.508629699630796, -0.044802370851755174, 0.8586508742123365,
      -0.12128480194602098, 0.4321472685365301, 0.4321472685365301, 0.7821684431180708,
      0.508629699630796, -0.044802370851755174, -0.044802370851755174, 0.8586508742123365,
      0.4321472685365301, -0.12128480194602098, 0.4321472685365301, 0.7821684431180708,
      0.4321472685365301, 0.4321472685365301, -0.12128480194602098, 0.7821684431180708,
      0.37968289875261624, 0.37968289875261624, 0.37968289875261624, 0.753341017856078,
      0.03381941603233842, 0.03381941603233842, 0.9982828964265062, 0.03381941603233842,
      -0.044802370851755174, 0.044802370851755174, 0.8586508742123365, 0.508629699630796,
      -0.044802370851755174, 0.508629699630796, 0.8586508742123365, -0.044802370851755174,
      -0.12128480194602098, 0.4321472685365301, 0.7821684431180708, 0.4321472685365301,
      0.508629699630796, -0.044802370851755174, 0.8586508742123365, -0.044802370851755174,
      0.4321472685365301, -0.12128480194602098, 0.7821684431180708, 0.4321472685365301,
      0.4321472685365301, 0.4321472685365301, 0.7821684431180708, -0.12128480194602098,
      0.37968289875261624, 0.37968289875261624, 0.753341017856078, 0.37968289875261624,
      0.03381941603233842, 0.9982828964265062, 0.03381941603233842, 0.03381941603233842,
      -0.044802370851755174, 0.8586508742123365, -0.044802370851755174, 0.508629699630796,
      -0.044802370851755174, 0.8586508742123365, 0.508629699630796, -0.044802370851755174,
      -0.12128480194602098, 0.7821684431180708, 0.4321472685365301, 0.4321472685365301,
      0.508629699630796, 0.8586508742123365, -0.044802370851755174, -0.044802370851755174,
      0.4321472685365301, 0.7821684431180708, -0.12128480194602098, 0.4321472685365301,
      0.4321472685365301, 0.7821684431180708, 0.4321472685365301, -0.12128480194602098,
      0.37968289875261624, 0.753341017856078, 0.37968289875261624, 0.37968289875261624,
      0.9982828964265062, 0.03381941603233842, 0.03381941603233842, 0.03381941603233842,
      0.8586508742123365, -0.044802370851755174, -0.044802370851755174, 0.508629699630796,
      0.8586508742123365, -0.044802370851755174, 0.508629699630796, -0.044802370851755174,
      0.7821684431180708, -0.12128480194602098, 0.4321472685365301, 0.4321472685365301,
      0.8586508742123365, 0.508629699630796, -0.044802370851755174, -0.044802370851755174,
      0.7821684431180708, 0.4321472685365301, -0.12128480194602098, 0.4321472685365301,
      0.7821684431180708, 0.4321472685365301, 0.4321472685365301, -0.12128480194602098,
      0.753341017856078, 0.37968289875261624, 0.37968289875261624, 0.37968289875261624,
    ].map((n) => n / 8.881759591352166);

    for (let i = 0; i < 4 * 0x800; i++) {
      heapF64[offset + i] = gradients4D[i % gradients4D.length];
    }
  }
}

// create look ups
{
  const heapU32 = new Uint32Array(heap, 0x800 * 2 + (6 + (2 + 3 + 4) * 0x800) * 8);
  const heapI32 = new Int32Array(heap, 0x800 * 2 + (6 + (2 + 3 + 4) * 0x800) * 8);
  const heapF64 = new Float64Array(heap, 0x800 * 2 + (6 + (2 + 3 + 4) * 0x800) * 8);

  let offset = 0;
  {
    const lookupPairs2D = [0, 1, 1, 0, 4, 1, 17, 0, 20, 2, 21, 2, 22, 5, 23, 5, 26, 4, 39, 3, 42, 4, 43, 3];
    for (let i = 0; i < lookupPairs2D.length; i += 2) {
      heapU32[offset + lookupPairs2D[i]] = lookupPairs2D[i + 1];
    }
    offset += 64;

    const squish2D = (Math.sqrt(2 + 1) - 1) / 2;
    function setContribution2D(multiplier, xsb, ysb) {
      heapF64[(offset >> 1) + 0] = -xsb - multiplier * squish2D;
      heapF64[(offset >> 1) + 1] = -ysb - multiplier * squish2D;
      heapI32[offset + (2 << 1) + 0] = xsb;
      heapI32[offset + (2 << 1) + 1] = ysb;
      offset += 3 << 1;
    }

    const base2D = [
      [1, 1, 0, 1, 0, 1, 0, 0, 0],
      [1, 1, 0, 1, 0, 1, 2, 1, 1],
    ];
    const p2D = [0, 0, 1, -1, 0, 0, -1, 1, 0, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0];
    for (let i = 0; i < p2D.length; i += 4) {
      const baseSet = base2D[p2D[i]];
      for (let k = 0; k < baseSet.length; k += 3) {
        setContribution2D(baseSet[k], baseSet[k + 1], baseSet[k + 2]);
      }
      setContribution2D(p2D[i + 1], p2D[i + 2], p2D[i + 3]);
    }
  }

  {
    // prettier-ignore
    const lookupPairs3D = [0, 2, 1, 1, 2, 2, 5, 1, 6, 0, 7, 0, 32, 2, 34, 2, 129, 1, 133, 1, 160, 5, 161, 5, 518, 0, 519, 0, 546, 4, 550, 4, 645, 3, 647, 3, 672, 5, 673, 5, 674, 4, 677, 3, 678, 4, 679, 3, 680, 13, 681, 13, 682, 12, 685, 14, 686, 12, 687, 14, 712, 20, 714, 18, 809, 21, 813, 23, 840, 20, 841, 21, 1198, 19, 1199, 22, 1226, 18, 1230, 19, 1325, 23, 1327, 22, 1352, 15, 1353, 17, 1354, 15, 1357, 17, 1358, 16, 1359, 16, 1360, 11, 1361, 10, 1362, 11, 1365, 10, 1366, 9, 1367, 9, 1392, 11, 1394, 11, 1489, 10, 1493, 10, 1520, 8, 1521, 8, 1878, 9, 1879, 9, 1906, 7, 1910, 7, 2005, 6, 2007, 6, 2032, 8, 2033, 8, 2034, 7, 2037, 6, 2038, 7, 2039, 6];
    for (let i = 0; i < lookupPairs3D.length; i += 2) {
      heapU32[offset + lookupPairs3D[i]] = lookupPairs3D[i + 1];
    }

    offset += 2048;

    const base3D = [
      [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
      [2, 1, 1, 0, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 1],
      [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 1, 1, 0, 2, 1, 0, 1, 2, 0, 1, 1],
    ];
    // prettier-ignore
    const p3D = [0, 0, 1, -1, 0, 0, 1, 0, -1, 0, 0, -1, 1, 0, 0, 0, 1, -1, 0, 0, -1, 0, 1, 0, 0, -1, 1, 0, 2, 1, 1, 0, 1, 1, 1, -1, 0, 2, 1, 0, 1, 1, 1, -1, 1, 0, 2, 0, 1, 1, 1, -1, 1, 1, 1, 3, 2, 1, 0, 3, 1, 2, 0, 1, 3, 2, 0, 1, 3, 1, 0, 2, 1, 3, 0, 2, 1, 3, 0, 1, 2, 1, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 0, 1, 0, 2, 0, 2, 0, 1, 1, 0, 0, 1, 2, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, -1, 1, 2, 0, 0, 0, 0, 1, -1, 1, 1, 2, 0, 0, 0, 0, 1, 1, 1, -1, 2, 3, 1, 1, 1, 2, 0, 0, 2, 2, 3, 1, 1, 1, 2, 2, 0, 0, 2, 3, 1, 1, 1, 2, 0, 2, 0, 2, 1, 1, -1, 1, 2, 0, 0, 2, 2, 1, 1, -1, 1, 2, 2, 0, 0, 2, 1, -1, 1, 1, 2, 0, 0, 2, 2, 1, -1, 1, 1, 2, 0, 2, 0, 2, 1, 1, 1, -1, 2, 2, 0, 0, 2, 1, 1, 1, -1, 2, 0, 2, 0];

    const squish3D = (Math.sqrt(3 + 1) - 1) / 3;
    function setContribution3D(multiplier, xsb, ysb, zsb) {
      heapF64[(offset >> 1) + 0] = -xsb - multiplier * squish3D;
      heapF64[(offset >> 1) + 1] = -ysb - multiplier * squish3D;
      heapF64[(offset >> 1) + 2] = -zsb - multiplier * squish3D;
      heapI32[offset + (3 << 1) + 0] = xsb;
      heapI32[offset + (3 << 1) + 1] = ysb;
      heapI32[offset + (3 << 1) + 2] = zsb;
      offset += 5 << 1;
    }

    for (let i = 0; i < p3D.length; i += 9) {
      const baseSet = base3D[p3D[i]];
      const length = baseSet.length / 4 + 2;
      heapU32[offset] = length;
      offset += 1 << 1;
      for (let k = 0; k < baseSet.length; k += 4)
        setContribution3D(baseSet[k], baseSet[k + 1], baseSet[k + 2], baseSet[k + 3]);
      setContribution3D(p3D[i + 1], p3D[i + 2], p3D[i + 3], p3D[i + 4]);
      setContribution3D(p3D[i + 5], p3D[i + 6], p3D[i + 7], p3D[i + 8]);
      offset += (5 * (8 - length)) << 1;
    }
  }

  {
    //prettier-ignore
    const lookupPairs4D = [0, 3, 1, 2, 2, 3, 5, 2, 6, 1, 7, 1, 8, 3, 9, 2, 10, 3, 13, 2, 16, 3, 18, 3, 22, 1, 23, 1, 24, 3, 26, 3, 33, 2, 37, 2, 38, 1, 39, 1, 41, 2, 45, 2, 54, 1, 55, 1, 56, 0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 256, 3, 258, 3, 264, 3, 266, 3, 272, 3, 274, 3, 280, 3, 282, 3, 2049, 2, 2053, 2, 2057, 2, 2061, 2, 2081, 2, 2085, 2, 2089, 2, 2093, 2, 2304, 9, 2305, 9, 2312, 9, 2313, 9, 16390, 1, 16391, 1, 16406, 1, 16407, 1, 16422, 1, 16423, 1, 16438, 1, 16439, 1, 16642, 8, 16646, 8, 16658, 8, 16662, 8, 18437, 6, 18439, 6, 18469, 6, 18471, 6, 18688, 9, 18689, 9, 18690, 8, 18693, 6, 18694, 8, 18695, 6, 18696, 9, 18697, 9, 18706, 8, 18710, 8, 18725, 6, 18727, 6, 131128, 0, 131129, 0, 131130, 0, 131131, 0, 131132, 0, 131133, 0, 131134, 0, 131135, 0, 131352, 7, 131354, 7, 131384, 7, 131386, 7, 133161, 5, 133165, 5, 133177, 5, 133181, 5, 133376, 9, 133377, 9, 133384, 9, 133385, 9, 133400, 7, 133402, 7, 133417, 5, 133421, 5, 133432, 7, 133433, 5, 133434, 7, 133437, 5, 147510, 4, 147511, 4, 147518, 4, 147519, 4, 147714, 8, 147718, 8, 147730, 8, 147734, 8, 147736, 7, 147738, 7, 147766, 4, 147767, 4, 147768, 7, 147770, 7, 147774, 4, 147775, 4, 149509, 6, 149511, 6, 149541, 6, 149543, 6, 149545, 5, 149549, 5, 149558, 4, 149559, 4, 149561, 5, 149565, 5, 149566, 4, 149567, 4, 149760, 9, 149761, 9, 149762, 8, 149765, 6, 149766, 8, 149767, 6, 149768, 9, 149769, 9, 149778, 8, 149782, 8, 149784, 7, 149786, 7, 149797, 6, 149799, 6, 149801, 5, 149805, 5, 149814, 4, 149815, 4, 149816, 7, 149817, 5, 149818, 7, 149821, 5, 149822, 4, 149823, 4, 149824, 37, 149825, 37, 149826, 36, 149829, 34, 149830, 36, 149831, 34, 149832, 37, 149833, 37, 149842, 36, 149846, 36, 149848, 35, 149850, 35, 149861, 34, 149863, 34, 149865, 33, 149869, 33, 149878, 32, 149879, 32, 149880, 35, 149881, 33, 149882, 35, 149885, 33, 149886, 32, 149887, 32, 150080, 49, 150082, 48, 150088, 49, 150098, 48, 150104, 47, 150106, 47, 151873, 46, 151877, 45, 151881, 46, 151909, 45, 151913, 44, 151917, 44, 152128, 49, 152129, 46, 152136, 49, 152137, 46, 166214, 43, 166215, 42, 166230, 43, 166247, 42, 166262, 41, 166263, 41, 166466, 48, 166470, 43, 166482, 48, 166486, 43, 168261, 45, 168263, 42, 168293, 45, 168295, 42, 168512, 31, 168513, 28, 168514, 31, 168517, 28, 168518, 25, 168519, 25, 280952, 40, 280953, 39, 280954, 40, 280957, 39, 280958, 38, 280959, 38, 281176, 47, 281178, 47, 281208, 40, 281210, 40, 282985, 44, 282989, 44, 283001, 39, 283005, 39, 283208, 30, 283209, 27, 283224, 30, 283241, 27, 283256, 22, 283257, 22, 297334, 41, 297335, 41, 297342, 38, 297343, 38, 297554, 29, 297558, 24, 297562, 29, 297590, 24, 297594, 21, 297598, 21, 299365, 26, 299367, 23, 299373, 26, 299383, 23, 299389, 20, 299391, 20, 299584, 31, 299585, 28, 299586, 31, 299589, 28, 299590, 25, 299591, 25, 299592, 30, 299593, 27, 299602, 29, 299606, 24, 299608, 30, 299610, 29, 299621, 26, 299623, 23, 299625, 27, 299629, 26, 299638, 24, 299639, 23, 299640, 22, 299641, 22, 299642, 21, 299645, 20, 299646, 21, 299647, 20, 299648, 61, 299649, 60, 299650, 61, 299653, 60, 299654, 59, 299655, 59, 299656, 58, 299657, 57, 299666, 55, 299670, 54, 299672, 58, 299674, 55, 299685, 52, 299687, 51, 299689, 57, 299693, 52, 299702, 54, 299703, 51, 299704, 56, 299705, 56, 299706, 53, 299709, 50, 299710, 53, 299711, 50, 299904, 61, 299906, 61, 299912, 58, 299922, 55, 299928, 58, 299930, 55, 301697, 60, 301701, 60, 301705, 57, 301733, 52, 301737, 57, 301741, 52, 301952, 79, 301953, 79, 301960, 76, 301961, 76, 316038, 59, 316039, 59, 316054, 54, 316071, 51, 316086, 54, 316087, 51, 316290, 78, 316294, 78, 316306, 73, 316310, 73, 318085, 77, 318087, 77, 318117, 70, 318119, 70, 318336, 79, 318337, 79, 318338, 78, 318341, 77, 318342, 78, 318343, 77, 430776, 56, 430777, 56, 430778, 53, 430781, 50, 430782, 53, 430783, 50, 431000, 75, 431002, 72, 431032, 75, 431034, 72, 432809, 74, 432813, 69, 432825, 74, 432829, 69, 433032, 76, 433033, 76, 433048, 75, 433065, 74, 433080, 75, 433081, 74, 447158, 71, 447159, 68, 447166, 71, 447167, 68, 447378, 73, 447382, 73, 447386, 72, 447414, 71, 447418, 72, 447422, 71, 449189, 70, 449191, 70, 449197, 69, 449207, 68, 449213, 69, 449215, 68, 449408, 67, 449409, 67, 449410, 66, 449413, 64, 449414, 66, 449415, 64, 449416, 67, 449417, 67, 449426, 66, 449430, 66, 449432, 65, 449434, 65, 449445, 64, 449447, 64, 449449, 63, 449453, 63, 449462, 62, 449463, 62, 449464, 65, 449465, 63, 449466, 65, 449469, 63, 449470, 62, 449471, 62, 449472, 19, 449473, 19, 449474, 18, 449477, 16, 449478, 18, 449479, 16, 449480, 19, 449481, 19, 449490, 18, 449494, 18, 449496, 17, 449498, 17, 449509, 16, 449511, 16, 449513, 15, 449517, 15, 449526, 14, 449527, 14, 449528, 17, 449529, 15, 449530, 17, 449533, 15, 449534, 14, 449535, 14, 449728, 19, 449729, 19, 449730, 18, 449734, 18, 449736, 19, 449737, 19, 449746, 18, 449750, 18, 449752, 17, 449754, 17, 449784, 17, 449786, 17, 451520, 19, 451521, 19, 451525, 16, 451527, 16, 451528, 19, 451529, 19, 451557, 16, 451559, 16, 451561, 15, 451565, 15, 451577, 15, 451581, 15, 451776, 19, 451777, 19, 451784, 19, 451785, 19, 465858, 18, 465861, 16, 465862, 18, 465863, 16, 465874, 18, 465878, 18, 465893, 16, 465895, 16, 465910, 14, 465911, 14, 465918, 14, 465919, 14, 466114, 18, 466118, 18, 466130, 18, 466134, 18, 467909, 16, 467911, 16, 467941, 16, 467943, 16, 468160, 13, 468161, 13, 468162, 13, 468163, 13, 468164, 13, 468165, 13, 468166, 13, 468167, 13, 580568, 17, 580570, 17, 580585, 15, 580589, 15, 580598, 14, 580599, 14, 580600, 17, 580601, 15, 580602, 17, 580605, 15, 580606, 14, 580607, 14, 580824, 17, 580826, 17, 580856, 17, 580858, 17, 582633, 15, 582637, 15, 582649, 15, 582653, 15, 582856, 12, 582857, 12, 582872, 12, 582873, 12, 582888, 12, 582889, 12, 582904, 12, 582905, 12, 596982, 14, 596983, 14, 596990, 14, 596991, 14, 597202, 11, 597206, 11, 597210, 11, 597214, 11, 597234, 11, 597238, 11, 597242, 11, 597246, 11, 599013, 10, 599015, 10, 599021, 10, 599023, 10, 599029, 10, 599031, 10, 599037, 10, 599039, 10, 599232, 13, 599233, 13, 599234, 13, 599235, 13, 599236, 13, 599237, 13, 599238, 13, 599239, 13, 599240, 12, 599241, 12, 599250, 11, 599254, 11, 599256, 12, 599257, 12, 599258, 11, 599262, 11, 599269, 10, 599271, 10, 599272, 12, 599273, 12, 599277, 10, 599279, 10, 599282, 11, 599285, 10, 599286, 11, 599287, 10, 599288, 12, 599289, 12, 599290, 11, 599293, 10, 599294, 11, 599295, 10];
    for (let i = 0; i < lookupPairs4D.length; i += 2) {
      heapU32[offset + lookupPairs4D[i]] = lookupPairs4D[i + 1];
    }

    offset += 1048576;

    // prettier-ignore
    const base4D = [
      [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1],
      [3, 1, 1, 1, 0, 3, 1, 1, 0, 1, 3, 1, 0, 1, 1, 3, 0, 1, 1, 1, 4, 1, 1, 1, 1],
      [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 2, 0, 0, 1, 1],
      [3, 1, 1, 1, 0, 3, 1, 1, 0, 1, 3, 1, 0, 1, 1, 3, 0, 1, 1, 1, 2, 1, 1, 0, 0, 2, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 2, 0, 0, 1, 1]
    ];
    // prettier-ignore
    const p4D = [0, 0, 1, -1, 0, 0, 0, 1, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 1, 0, -1, 0, 0, -1, 0, 1, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, -1, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 1, 0, 0, 0, -1, 1, 0, 2, 1, 1, 0, 0, 1, 1, 1, -1, 0, 1, 1, 1, 0, -1, 0, 2, 1, 0, 1, 0, 1, 1, -1, 1, 0, 1, 1, 0, 1, -1, 0, 2, 0, 1, 1, 0, 1, -1, 1, 1, 0, 1, 0, 1, 1, -1, 0, 2, 1, 0, 0, 1, 1, 1, -1, 0, 1, 1, 1, 0, -1, 1, 0, 2, 0, 1, 0, 1, 1, -1, 1, 0, 1, 1, 0, 1, -1, 1, 0, 2, 0, 0, 1, 1, 1, -1, 0, 1, 1, 1, 0, -1, 1, 1, 1, 4, 2, 1, 1, 0, 4, 1, 2, 1, 0, 4, 1, 1, 2, 0, 1, 4, 2, 1, 0, 1, 4, 1, 2, 0, 1, 4, 1, 1, 0, 2, 1, 4, 2, 0, 1, 1, 4, 1, 0, 2, 1, 4, 1, 0, 1, 2, 1, 4, 0, 2, 1, 1, 4, 0, 1, 2, 1, 4, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0, 3, 2, 1, 0, 0, 3, 1, 2, 0, 0, 1, 2, 1, 0, 1, 0, 3, 2, 0, 1, 0, 3, 1, 0, 2, 0, 1, 2, 0, 1, 1, 0, 3, 0, 2, 1, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 0, 1, 3, 2, 0, 0, 1, 3, 1, 0, 0, 2, 1, 2, 0, 1, 0, 1, 3, 0, 2, 0, 1, 3, 0, 1, 0, 2, 1, 2, 0, 0, 1, 1, 3, 0, 0, 2, 1, 3, 0, 0, 1, 2, 2, 3, 1, 1, 1, 0, 2, 1, 1, 1, -1, 2, 2, 0, 0, 0, 2, 3, 1, 1, 0, 1, 2, 1, 1, -1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 0, 1, 1, 2, 1, -1, 1, 1, 2, 2, 0, 0, 0, 2, 3, 1, 1, 1, 0, 2, 1, 1, 1, -1, 2, 0, 2, 0, 0, 2, 3, 1, 1, 0, 1, 2, 1, 1, -1, 1, 2, 0, 2, 0, 0, 2, 3, 0, 1, 1, 1, 2, -1, 1, 1, 1, 2, 0, 2, 0, 0, 2, 3, 1, 1, 1, 0, 2, 1, 1, 1, -1, 2, 0, 0, 2, 0, 2, 3, 1, 0, 1, 1, 2, 1, -1, 1, 1, 2, 0, 0, 2, 0, 2, 3, 0, 1, 1, 1, 2, -1, 1, 1, 1, 2, 0, 0, 2, 0, 2, 3, 1, 1, 0, 1, 2, 1, 1, -1, 1, 2, 0, 0, 0, 2, 2, 3, 1, 0, 1, 1, 2, 1, -1, 1, 1, 2, 0, 0, 0, 2, 2, 3, 0, 1, 1, 1, 2, -1, 1, 1, 1, 2, 0, 0, 0, 2, 2, 1, 1, 1, -1, 0, 1, 1, 1, 0, -1, 0, 0, 0, 0, 0, 2, 1, 1, -1, 1, 0, 1, 1, 0, 1, -1, 0, 0, 0, 0, 0, 2, 1, -1, 1, 1, 0, 1, 0, 1, 1, -1, 0, 0, 0, 0, 0, 2, 1, 1, -1, 0, 1, 1, 1, 0, -1, 1, 0, 0, 0, 0, 0, 2, 1, -1, 1, 0, 1, 1, 0, 1, -1, 1, 0, 0, 0, 0, 0, 2, 1, -1, 0, 1, 1, 1, 0, -1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, -1, 0, 1, 1, 1, 0, -1, 2, 2, 0, 0, 0, 2, 1, 1, -1, 1, 0, 1, 1, 0, 1, -1, 2, 2, 0, 0, 0, 2, 1, 1, -1, 0, 1, 1, 1, 0, -1, 1, 2, 2, 0, 0, 0, 2, 1, 1, 1, -1, 0, 1, 1, 1, 0, -1, 2, 0, 2, 0, 0, 2, 1, -1, 1, 1, 0, 1, 0, 1, 1, -1, 2, 0, 2, 0, 0, 2, 1, -1, 1, 0, 1, 1, 0, 1, -1, 1, 2, 0, 2, 0, 0, 2, 1, 1, -1, 1, 0, 1, 1, 0, 1, -1, 2, 0, 0, 2, 0, 2, 1, -1, 1, 1, 0, 1, 0, 1, 1, -1, 2, 0, 0, 2, 0, 2, 1, -1, 0, 1, 1, 1, 0, -1, 1, 1, 2, 0, 0, 2, 0, 2, 1, 1, -1, 0, 1, 1, 1, 0, -1, 1, 2, 0, 0, 0, 2, 2, 1, -1, 1, 0, 1, 1, 0, 1, -1, 1, 2, 0, 0, 0, 2, 2, 1, -1, 0, 1, 1, 1, 0, -1, 1, 1, 2, 0, 0, 0, 2, 3, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 2, 1, 1, 1, -1, 3, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 1, 1, 1, -1, 3, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 1, -1, 3, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 2, 1, 1, -1, 1, 3, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 1, 1, -1, 1, 3, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 2, 1, 1, -1, 1, 3, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 2, 1, -1, 1, 1, 3, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, 1, -1, 1, 1, 3, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 2, 1, -1, 1, 1, 3, 1, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, -1, 1, 1, 1, 3, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 2, -1, 1, 1, 1, 3, 1, 0, 0, 0, 1, 2, 0, 0, 0, 2, 2, -1, 1, 1, 1, 3, 3, 2, 1, 0, 0, 3, 1, 2, 0, 0, 4, 1, 1, 1, 1, 3, 3, 2, 0, 1, 0, 3, 1, 0, 2, 0, 4, 1, 1, 1, 1, 3, 3, 0, 2, 1, 0, 3, 0, 1, 2, 0, 4, 1, 1, 1, 1, 3, 3, 2, 0, 0, 1, 3, 1, 0, 0, 2, 4, 1, 1, 1, 1, 3, 3, 0, 2, 0, 1, 3, 0, 1, 0, 2, 4, 1, 1, 1, 1, 3, 3, 0, 0, 2, 1, 3, 0, 0, 1, 2, 4, 1, 1, 1, 1, 3, 3, 2, 1, 0, 0, 3, 1, 2, 0, 0, 2, 1, 1, 1, -1, 3, 3, 2, 0, 1, 0, 3, 1, 0, 2, 0, 2, 1, 1, 1, -1, 3, 3, 0, 2, 1, 0, 3, 0, 1, 2, 0, 2, 1, 1, 1, -1, 3, 3, 2, 1, 0, 0, 3, 1, 2, 0, 0, 2, 1, 1, -1, 1, 3, 3, 2, 0, 0, 1, 3, 1, 0, 0, 2, 2, 1, 1, -1, 1, 3, 3, 0, 2, 0, 1, 3, 0, 1, 0, 2, 2, 1, 1, -1, 1, 3, 3, 2, 0, 1, 0, 3, 1, 0, 2, 0, 2, 1, -1, 1, 1, 3, 3, 2, 0, 0, 1, 3, 1, 0, 0, 2, 2, 1, -1, 1, 1, 3, 3, 0, 0, 2, 1, 3, 0, 0, 1, 2, 2, 1, -1, 1, 1, 3, 3, 0, 2, 1, 0, 3, 0, 1, 2, 0, 2, -1, 1, 1, 1, 3, 3, 0, 2, 0, 1, 3, 0, 1, 0, 2, 2, -1, 1, 1, 1, 3, 3, 0, 0, 2, 1, 3, 0, 0, 1, 2, 2, -1, 1, 1, 1];

    const squish4D = (Math.sqrt(4 + 1) - 1) / 4;
    function setContribution4D(multiplier, xsb, ysb, zsb, wsb) {
      heapF64[(offset >> 1) + 0] = -xsb - multiplier * squish4D;
      heapF64[(offset >> 1) + 1] = -ysb - multiplier * squish4D;
      heapF64[(offset >> 1) + 2] = -zsb - multiplier * squish4D;
      heapF64[(offset >> 1) + 3] = -wsb - multiplier * squish4D;
      heapI32[offset + (4 << 1) + 0] = xsb;
      heapI32[offset + (4 << 1) + 1] = ysb;
      heapI32[offset + (4 << 1) + 2] = zsb;
      heapI32[offset + (4 << 1) + 3] = wsb;
      offset += 6 << 1;
    }

    const start = offset;
    let count = 0;
    for (let i = 0; i < p4D.length; i += 16) {
      count++;
      const baseSet = base4D[p4D[i]];
      const length = baseSet.length / 5 + 3;
      heapU32[offset] = length;
      offset += 1 << 1;
      for (let k = 0; k < baseSet.length; k += 5)
        setContribution4D(baseSet[k], baseSet[k + 1], baseSet[k + 2], baseSet[k + 3], baseSet[k + 4]);
      setContribution4D(p4D[i + 1], p4D[i + 2], p4D[i + 3], p4D[i + 4], p4D[i + 5]);
      setContribution4D(p4D[i + 6], p4D[i + 7], p4D[i + 8], p4D[i + 9], p4D[i + 10]);
      setContribution4D(p4D[i + 11], p4D[i + 12], p4D[i + 13], p4D[i + 14], p4D[i + 15]);
      offset += (6 * (16 - length)) << 1;
    }
  }
}

const { setSeed, noise2D, noise3D, noise4D } = OpenSimplex(
  {
    Math,
    Uint16Array,
    Uint32Array,
    Int32Array,
    Float64Array,
  },
  {
    setSeed: (value) => (random.seed = value),
    nextUint32: random.nextUint32,
    print(n) {
      return console.log(n);
    },
  },
  heap
);

let seed = 0;
setSeed(seed);

export default {
  set seed(value) {
    seed = value;
    setSeed(seed);
  },
  get seed() {
    return seed;
  },
  noise2D,
  noise3D,
  noise4D,
};
