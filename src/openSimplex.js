import random from './random.js';

function OpenSimplex(stdlib, foreign, heap) {
  'use asm';
  var imul = stdlib.Math.imul;
  var floor = stdlib.Math.floor;
  var ceil = stdlib.Math.ceil;

  var _setSeed = foreign.setSeed;
  var nextU32 = foreign.nextUint32;
  var print = foreign.print;

  var heapU16 = new stdlib.Uint16Array(heap);
  var heapU32 = new stdlib.Uint32Array(heap);
  var heapI32 = new stdlib.Int32Array(heap);
  var heapF64 = new stdlib.Float64Array(heap);

  var pSize = 0x800;
  var pMask = 0x7ff;

  var X = 0x00;
  var Y = 0x08;
  var Z = 0x10;
  var W = 0x18;

  var XI = 0x0;
  var YI = 0x4;
  var ZI = 0x8;
  var WI = 0xc;

  var contribution2D = 0x18;

  var perm = 0x0; // 2048 permutations * 2 byte

  var stretchConstant2D = 0x1000;
  var stretchConstant3D = 0x1008;
  var stretchConstant4D = 0x1010;

  var squishConstant2D = 0x1018;
  var squishConstant3D = 0x1020;
  var squishConstant4D = 0x1028;

  var gradients2D = 0x01030; // 2048 gradients * 2 dimensions * 8 bytes
  var gradients3D = 0x09030; // 2048 gradients * 3 dimensions * 8 bytes
  var gradients4D = 0x15030; // 2048 gradients * 4 dimensions * 8 bytes

  var lookUp2D = 0x25030; // 64 * 4 bytes
  var contributions2D = 0x25130; // 24 * (2 * 8 bytes + 2 * 4 bytes)

  function normalize(n) {
    n = +n;
    return (n + 1.0) / 2.0;
  }

  function setSeed(value) {
    value = +value;
    var i = 0;
    var r = 0;
    var temp = 0;

    _setSeed(value);

    for (i = 0; (i | 0) < (pSize | 0); i = (i + 1) | 0) {
      heapU16[(perm + (i << 1)) >> 1] = i;
    }
    for (i = 0; (i | 0) < (pSize | 0); i = (i + 1) | 0) {
      r = (nextU32() | 0) & pMask;
      temp = getPerm(i) | 0;
      heapU16[(perm + (i << 1)) >> 1] = getPerm(r) | 0;
      heapU16[(perm + (r << 1)) >> 1] = temp;
    }
  }

  function getPerm(i) {
    i = i | 0;
    return heapU16[(perm + (i << 1)) >> 1] | 0;
  }

  function grad2D(xsb, ysb, dx, dy) {
    xsb = xsb | 0;
    ysb = ysb | 0;
    dx = +dx;
    dy = +dy;
    var i = 0;
    i = (getPerm(xsb & pMask) | 0) ^ (ysb & pMask);
    i = getPerm(i) | 0;
    return +heapF64[(gradients2D + (i << 4) + X) >> 3] * dx + +heapF64[(gradients2D + (i << 4) + Y) >> 3] * dy;
  }

  function eval2D(x, y) {
    x = +x;
    y = +y;
    var stretchOffset = 0.0;
    var xs = 0.0;
    var ys = 0.0;
    var xsb = 0;
    var ysb = 0;
    var xins = 0.0;
    var yins = 0.0;
    var inSum = 0.0;
    var squishOffsetIns = 0.0;
    var dx0 = 0.0;
    var dy0 = 0.0;
    var hash = 0;
    var cSet = 0;
    var i = 0;
    var c = 0;
    var dx = 0.0;
    var dy = 0.0;
    var px = 0;
    var py = 0;
    var attn = 0.0;
    var value = 0.0;

    // Place input coordinates onto grid.
    stretchOffset = (x + y) * heapF64[stretchConstant2D >> 3];
    xs = x + stretchOffset;
    ys = y + stretchOffset;

    // Floor to get grid coordinates of rhombus (stretched square) super-cell origin.
    xsb = ~~floor(xs);
    ysb = ~~floor(ys);

    // Compute grid coordinates relative to rhombus origin.
    xins = xs - +(xsb | 0);
    yins = ys - +(ysb | 0);

    // Sum those together to get a value that determines which region we're in.
    inSum = xins + yins;

    // Positions relative to origin point.
    squishOffsetIns = inSum * heapF64[squishConstant2D >> 3];
    dx0 = xins + squishOffsetIns;
    dy0 = yins + squishOffsetIns;

    hash =
      ~~floor(xins - yins + 1.0) | (~~floor(inSum) << 1) | (~~floor(inSum + yins) << 2) | (~~floor(inSum + xins) << 4);

    cSet = heapU32[(lookUp2D + (hash << 2)) >> 2] << 2;

    for (i = 0; (i | 0) < 4; i = (i + 1) | 0) {
      c = imul(contribution2D, (i + cSet) | 0);
      dx = dx0 + +heapF64[(contributions2D + c + X) >> 3];
      dy = dy0 + +heapF64[(contributions2D + c + Y) >> 3];
      attn = 2.0 - dx * dx - dy * dy;
      if (attn > 0.0) {
        px = xsb + heapI32[(contributions2D + c + 0x10 + XI) >> 2];
        py = ysb + heapI32[(contributions2D + c + 0x10 + YI) >> 2];

        attn = attn * attn;
        value = value + attn * attn * +grad2D(px, py, dx, dy);
      }
    }
    return +normalize(value);
  }

  return {
    setSeed: setSeed,
    eval2D: eval2D,
  };
}

const heap = new ArrayBuffer(0x100000);

// set constants
{
  const heapF64 = new Float64Array(heap, 0x800 * 2);
  heapF64[0 + 0] = (1 / Math.sqrt(2 + 1) - 1) / 2; // stretch constant 2d
  heapF64[3 + 0] = (Math.sqrt(2 + 1) - 1) / 2; // squish constant 2d
  heapF64[0 + 1] = (1 / Math.sqrt(3 + 1) - 1) / 3; // stretch constant 3d
  heapF64[3 + 1] = (Math.sqrt(3 + 1) - 1) / 3; // squish constant 3d
  heapF64[0 + 2] = (1 / Math.sqrt(4 + 1) - 1) / 4; // stretch constant 4d
  heapF64[3 + 2] = (Math.sqrt(4 + 1) - 1) / 4; // squish constant 4d
}

// create gradients
{
  const heapF64 = new Float64Array(heap, 0x800 * 2 + 6 * 0x8);

  let offset = 0;
  {
    // prettier-ignore
    const gradients2D = [
      0.130526192220052, 0.99144486137381,
      0.38268343236509, 0.923879532511287,
      0.608761429008721, 0.793353340291235,
      0.793353340291235, 0.608761429008721,
      0.923879532511287, 0.38268343236509,
      0.99144486137381, 0.130526192220051,
      0.99144486137381, -0.130526192220051,
      0.923879532511287, -0.38268343236509,
      0.793353340291235, -0.60876142900872,
      0.608761429008721, -0.793353340291235,
      0.38268343236509, -0.923879532511287,
      0.130526192220052, -0.99144486137381,
      -0.130526192220052, -0.99144486137381,
      -0.38268343236509, -0.923879532511287,
      -0.608761429008721, -0.793353340291235,
      -0.793353340291235, -0.608761429008721,
      -0.923879532511287, -0.38268343236509,
      -0.99144486137381, -0.130526192220052,
      -0.99144486137381, 0.130526192220051,
      -0.923879532511287, 0.38268343236509,
      -0.793353340291235, 0.608761429008721,
      -0.608761429008721, 0.793353340291235,
      -0.38268343236509, 0.923879532511287,
      -0.130526192220052, 0.99144486137381,
    ].map((n) => n / 7.69084574549313);

    for (let i = 0; i < 2 * 0x800; i++) {
      heapF64[offset + i] = gradients2D[i % gradients2D.length];
    }
    offset += 2 * 0x800;
  }

  {
    // prettier-ignore
    const gradients3D = [
      -1.4082482904633333,  -1.4082482904633333,  -2.6329931618533333,
      -0.07491495712999985,  -0.07491495712999985,  -3.29965982852,
      0.24732126143473554,  -1.6667938651159684,  -2.838945207362466,
      -1.6667938651159684,  0.24732126143473554,  -2.838945207362466,
      -1.4082482904633333,  -2.6329931618533333,  -1.4082482904633333,
      -0.07491495712999985,  -3.29965982852,  -0.07491495712999985,
      -1.6667938651159684,  -2.838945207362466,  0.24732126143473554,
      0.24732126143473554,  -2.838945207362466,  -1.6667938651159684,
      1.5580782047233335,  0.33333333333333337,  -2.8914115380566665,
      2.8914115380566665,  -0.33333333333333337,  -1.5580782047233335,
      1.8101897177633992,  -1.2760767510338025,  -2.4482280932803,
      2.4482280932803,  1.2760767510338025,  -1.8101897177633992,
      1.5580782047233335,  -2.8914115380566665,  0.33333333333333337,
      2.8914115380566665,  -1.5580782047233335,  -0.33333333333333337,
      2.4482280932803,  -1.8101897177633992,  1.2760767510338025,
      1.8101897177633992,  -2.4482280932803,  -1.2760767510338025,
      -2.6329931618533333,  -1.4082482904633333,  -1.4082482904633333,
      -3.29965982852,  -0.07491495712999985,  -0.07491495712999985,
      -2.838945207362466,  0.24732126143473554,  -1.6667938651159684,
      -2.838945207362466,  -1.6667938651159684,  0.24732126143473554,
      0.33333333333333337,  1.5580782047233335,  -2.8914115380566665,
      -0.33333333333333337,  2.8914115380566665,  -1.5580782047233335,
      1.2760767510338025,  2.4482280932803,  -1.8101897177633992,
      -1.2760767510338025,  1.8101897177633992,  -2.4482280932803,
      0.33333333333333337,  -2.8914115380566665,  1.5580782047233335,
      -0.33333333333333337,  -1.5580782047233335,  2.8914115380566665,
      -1.2760767510338025,  -2.4482280932803,  1.8101897177633992,
      1.2760767510338025,  -1.8101897177633992,  2.4482280932803,
      3.29965982852,  0.07491495712999985,  0.07491495712999985,
      2.6329931618533333,  1.4082482904633333,  1.4082482904633333,
      2.838945207362466,  -0.24732126143473554,  1.6667938651159684,
      2.838945207362466,  1.6667938651159684,  -0.24732126143473554,
      -2.8914115380566665,  1.5580782047233335,  0.33333333333333337,
      -1.5580782047233335,  2.8914115380566665,  -0.33333333333333337,
      -2.4482280932803,  1.8101897177633992,  -1.2760767510338025,
      -1.8101897177633992,  2.4482280932803,  1.2760767510338025,
      -2.8914115380566665,  0.33333333333333337,  1.5580782047233335,
      -1.5580782047233335,  -0.33333333333333337,  2.8914115380566665,
      -1.8101897177633992,  1.2760767510338025,  2.4482280932803,
      -2.4482280932803,  -1.2760767510338025,  1.8101897177633992,
      0.07491495712999985,  3.29965982852,  0.07491495712999985,
      1.4082482904633333,  2.6329931618533333,  1.4082482904633333,
      1.6667938651159684,  2.838945207362466,  -0.24732126143473554,
      -0.24732126143473554,  2.838945207362466,  1.6667938651159684,
      0.07491495712999985,  0.07491495712999985,  3.29965982852,
      1.4082482904633333,  1.4082482904633333,  2.6329931618533333,
      -0.24732126143473554,  1.6667938651159684,  2.838945207362466,
      1.6667938651159684,  -0.24732126143473554,  2.838945207362466
    ].map((n) => n / 26.92263139946168);

    for (let i = 0; i < 3 * 0x800; i++) {
      heapF64[offset + i] = gradients3D[i % gradients3D.length];
    }
    offset += 3 * 0x800;
  }

  {
    // prettier-ignore
    const gradients4D = [
      -0.753341017856078, -0.37968289875261624, -0.37968289875261624, -0.37968289875261624,
      -0.7821684431180708, -0.4321472685365301, -0.4321472685365301, 0.12128480194602098,
      -0.7821684431180708, -0.4321472685365301, 0.12128480194602098, -0.4321472685365301,
      -0.7821684431180708, 0.12128480194602098, -0.4321472685365301, -0.4321472685365301,
      -0.8586508742123365, -0.508629699630796, 0.044802370851755174, 0.044802370851755174,
      -0.8586508742123365, 0.044802370851755174, -0.508629699630796, 0.044802370851755174,
      -0.8586508742123365, 0.044802370851755174, 0.044802370851755174, -0.508629699630796,
      -0.9982828964265062, -0.03381941603233842, -0.03381941603233842, -0.03381941603233842,
      -0.37968289875261624, -0.753341017856078, -0.37968289875261624, -0.37968289875261624,
      -0.4321472685365301, -0.7821684431180708, -0.4321472685365301, 0.12128480194602098,
      -0.4321472685365301, -0.7821684431180708, 0.12128480194602098, -0.4321472685365301,
      0.12128480194602098, -0.7821684431180708, -0.4321472685365301, -0.4321472685365301,
      -0.508629699630796, -0.8586508742123365, 0.044802370851755174, 0.044802370851755174,
      0.044802370851755174, -0.8586508742123365, -0.508629699630796, 0.044802370851755174,
      0.044802370851755174, -0.8586508742123365, 0.044802370851755174, -0.508629699630796,
      -0.03381941603233842, -0.9982828964265062, -0.03381941603233842, -0.03381941603233842,
      -0.37968289875261624, -0.37968289875261624, -0.753341017856078, -0.37968289875261624,
      -0.4321472685365301, -0.4321472685365301, -0.7821684431180708, 0.12128480194602098,
      -0.4321472685365301, 0.12128480194602098, -0.7821684431180708, -0.4321472685365301,
      0.12128480194602098, -0.4321472685365301, -0.7821684431180708, -0.4321472685365301,
      -0.508629699630796, 0.044802370851755174, -0.8586508742123365, 0.044802370851755174,
      0.044802370851755174, -0.508629699630796, -0.8586508742123365, 0.044802370851755174,
      0.044802370851755174, 0.044802370851755174, -0.8586508742123365, -0.508629699630796,
      -0.03381941603233842, -0.03381941603233842, -0.9982828964265062, -0.03381941603233842,
      -0.37968289875261624, -0.37968289875261624, -0.37968289875261624, -0.753341017856078,
      -0.4321472685365301, -0.4321472685365301, 0.12128480194602098, -0.7821684431180708,
      -0.4321472685365301, 0.12128480194602098, -0.4321472685365301, -0.7821684431180708,
      0.12128480194602098, -0.4321472685365301, -0.4321472685365301, -0.7821684431180708,
      -0.508629699630796, 0.044802370851755174, 0.044802370851755174, -0.8586508742123365,
      0.044802370851755174, -0.508629699630796, 0.044802370851755174, -0.8586508742123365,
      0.044802370851755174, 0.044802370851755174, -0.508629699630796, -0.8586508742123365,
      -0.03381941603233842, -0.03381941603233842, -0.03381941603233842, -0.9982828964265062,
      -0.6740059517812944, -0.3239847771997537, -0.3239847771997537, 0.5794684678643381,
      -0.7504883828755602, -0.4004672082940195, 0.15296486218853164, 0.5029860367700724,
      -0.7504883828755602, 0.15296486218853164, -0.4004672082940195, 0.5029860367700724,
      -0.8828161875373585, 0.08164729285680945, 0.08164729285680945, 0.4553054119602712,
      -0.4553054119602712, -0.08164729285680945, -0.08164729285680945, 0.8828161875373585,
      -0.5029860367700724, -0.15296486218853164, 0.4004672082940195, 0.7504883828755602,
      -0.5029860367700724, 0.4004672082940195, -0.15296486218853164, 0.7504883828755602,
      -0.5794684678643381, 0.3239847771997537, 0.3239847771997537, 0.6740059517812944,
      -0.3239847771997537, -0.6740059517812944, -0.3239847771997537, 0.5794684678643381,
      -0.4004672082940195, -0.7504883828755602, 0.15296486218853164, 0.5029860367700724,
      0.15296486218853164, -0.7504883828755602, -0.4004672082940195, 0.5029860367700724,
      0.08164729285680945, -0.8828161875373585, 0.08164729285680945, 0.4553054119602712,
      -0.08164729285680945, -0.4553054119602712, -0.08164729285680945, 0.8828161875373585,
      -0.15296486218853164, -0.5029860367700724, 0.4004672082940195, 0.7504883828755602,
      0.4004672082940195, -0.5029860367700724, -0.15296486218853164, 0.7504883828755602,
      0.3239847771997537, -0.5794684678643381, 0.3239847771997537, 0.6740059517812944,
      -0.3239847771997537, -0.3239847771997537, -0.6740059517812944, 0.5794684678643381,
      -0.4004672082940195, 0.15296486218853164, -0.7504883828755602, 0.5029860367700724,
      0.15296486218853164, -0.4004672082940195, -0.7504883828755602, 0.5029860367700724,
      0.08164729285680945, 0.08164729285680945, -0.8828161875373585, 0.4553054119602712,
      -0.08164729285680945, -0.08164729285680945, -0.4553054119602712, 0.8828161875373585,
      -0.15296486218853164, 0.4004672082940195, -0.5029860367700724, 0.7504883828755602,
      0.4004672082940195, -0.15296486218853164, -0.5029860367700724, 0.7504883828755602,
      0.3239847771997537, 0.3239847771997537, -0.5794684678643381, 0.6740059517812944,
      -0.6740059517812944, -0.3239847771997537, 0.5794684678643381, -0.3239847771997537,
      -0.7504883828755602, -0.4004672082940195, 0.5029860367700724, 0.15296486218853164,
      -0.7504883828755602, 0.15296486218853164, 0.5029860367700724, -0.4004672082940195,
      -0.8828161875373585, 0.08164729285680945, 0.4553054119602712, 0.08164729285680945,
      -0.4553054119602712, -0.08164729285680945, 0.8828161875373585, -0.08164729285680945,
      -0.5029860367700724, -0.15296486218853164, 0.7504883828755602, 0.4004672082940195,
      -0.5029860367700724, 0.4004672082940195, 0.7504883828755602, -0.15296486218853164,
      -0.5794684678643381, 0.3239847771997537, 0.6740059517812944, 0.3239847771997537,
      -0.3239847771997537, -0.6740059517812944, 0.5794684678643381, -0.3239847771997537,
      -0.4004672082940195, -0.7504883828755602, 0.5029860367700724, 0.15296486218853164,
      0.15296486218853164, -0.7504883828755602, 0.5029860367700724, -0.4004672082940195,
      0.08164729285680945, -0.8828161875373585, 0.4553054119602712, 0.08164729285680945,
      -0.08164729285680945, -0.4553054119602712, 0.8828161875373585, -0.08164729285680945,
      -0.15296486218853164, -0.5029860367700724, 0.7504883828755602, 0.4004672082940195,
      0.4004672082940195, -0.5029860367700724, 0.7504883828755602, -0.15296486218853164,
      0.3239847771997537, -0.5794684678643381, 0.6740059517812944, 0.3239847771997537,
      -0.3239847771997537, -0.3239847771997537, 0.5794684678643381, -0.6740059517812944,
      -0.4004672082940195, 0.15296486218853164, 0.5029860367700724, -0.7504883828755602,
      0.15296486218853164, -0.4004672082940195, 0.5029860367700724, -0.7504883828755602,
      0.08164729285680945, 0.08164729285680945, 0.4553054119602712, -0.8828161875373585,
      -0.08164729285680945, -0.08164729285680945, 0.8828161875373585, -0.4553054119602712,
      -0.15296486218853164, 0.4004672082940195, 0.7504883828755602, -0.5029860367700724,
      0.4004672082940195, -0.15296486218853164, 0.7504883828755602, -0.5029860367700724,
      0.3239847771997537, 0.3239847771997537, 0.6740059517812944, -0.5794684678643381,
      -0.6740059517812944, 0.5794684678643381, -0.3239847771997537, -0.3239847771997537,
      -0.7504883828755602, 0.5029860367700724, -0.4004672082940195, 0.15296486218853164,
      -0.7504883828755602, 0.5029860367700724, 0.15296486218853164, -0.4004672082940195,
      -0.8828161875373585, 0.4553054119602712, 0.08164729285680945, 0.08164729285680945,
      -0.4553054119602712, 0.8828161875373585, -0.08164729285680945, -0.08164729285680945,
      -0.5029860367700724, 0.7504883828755602, -0.15296486218853164, 0.4004672082940195,
      -0.5029860367700724, 0.7504883828755602, 0.4004672082940195, -0.15296486218853164,
      -0.5794684678643381, 0.6740059517812944, 0.3239847771997537, 0.3239847771997537,
      -0.3239847771997537, 0.5794684678643381, -0.6740059517812944, -0.3239847771997537,
      -0.4004672082940195, 0.5029860367700724, -0.7504883828755602, 0.15296486218853164,
      0.15296486218853164, 0.5029860367700724, -0.7504883828755602, -0.4004672082940195,
      0.08164729285680945, 0.4553054119602712, -0.8828161875373585, 0.08164729285680945,
      -0.08164729285680945, 0.8828161875373585, -0.4553054119602712, -0.08164729285680945,
      -0.15296486218853164, 0.7504883828755602, -0.5029860367700724, 0.4004672082940195,
      0.4004672082940195, 0.7504883828755602, -0.5029860367700724, -0.15296486218853164,
      0.3239847771997537, 0.6740059517812944, -0.5794684678643381, 0.3239847771997537,
      -0.3239847771997537, 0.5794684678643381, -0.3239847771997537, -0.6740059517812944,
      -0.4004672082940195, 0.5029860367700724, 0.15296486218853164, -0.7504883828755602,
      0.15296486218853164, 0.5029860367700724, -0.4004672082940195, -0.7504883828755602,
      0.08164729285680945, 0.4553054119602712, 0.08164729285680945, -0.8828161875373585,
      -0.08164729285680945, 0.8828161875373585, -0.08164729285680945, -0.4553054119602712,
      -0.15296486218853164, 0.7504883828755602, 0.4004672082940195, -0.5029860367700724,
      0.4004672082940195, 0.7504883828755602, -0.15296486218853164, -0.5029860367700724,
      0.3239847771997537, 0.6740059517812944, 0.3239847771997537, -0.5794684678643381,
      0.5794684678643381, -0.6740059517812944, -0.3239847771997537, -0.3239847771997537,
      0.5029860367700724, -0.7504883828755602, -0.4004672082940195, 0.15296486218853164,
      0.5029860367700724, -0.7504883828755602, 0.15296486218853164, -0.4004672082940195,
      0.4553054119602712, -0.8828161875373585, 0.08164729285680945, 0.08164729285680945,
      0.8828161875373585, -0.4553054119602712, -0.08164729285680945, -0.08164729285680945,
      0.7504883828755602, -0.5029860367700724, -0.15296486218853164, 0.4004672082940195,
      0.7504883828755602, -0.5029860367700724, 0.4004672082940195, -0.15296486218853164,
      0.6740059517812944, -0.5794684678643381, 0.3239847771997537, 0.3239847771997537,
      0.5794684678643381, -0.3239847771997537, -0.6740059517812944, -0.3239847771997537,
      0.5029860367700724, -0.4004672082940195, -0.7504883828755602, 0.15296486218853164,
      0.5029860367700724, 0.15296486218853164, -0.7504883828755602, -0.4004672082940195,
      0.4553054119602712, 0.08164729285680945, -0.8828161875373585, 0.08164729285680945,
      0.8828161875373585, -0.08164729285680945, -0.4553054119602712, -0.08164729285680945,
      0.7504883828755602, -0.15296486218853164, -0.5029860367700724, 0.4004672082940195,
      0.7504883828755602, 0.4004672082940195, -0.5029860367700724, -0.15296486218853164,
      0.6740059517812944, 0.3239847771997537, -0.5794684678643381, 0.3239847771997537,
      0.5794684678643381, -0.3239847771997537, -0.3239847771997537, -0.6740059517812944,
      0.5029860367700724, -0.4004672082940195, 0.15296486218853164, -0.7504883828755602,
      0.5029860367700724, 0.15296486218853164, -0.4004672082940195, -0.7504883828755602,
      0.4553054119602712, 0.08164729285680945, 0.08164729285680945, -0.8828161875373585,
      0.8828161875373585, -0.08164729285680945, -0.08164729285680945, -0.4553054119602712,
      0.7504883828755602, -0.15296486218853164, 0.4004672082940195, -0.5029860367700724,
      0.7504883828755602, 0.4004672082940195, -0.15296486218853164, -0.5029860367700724,
      0.6740059517812944, 0.3239847771997537, 0.3239847771997537, -0.5794684678643381,
      0.03381941603233842, 0.03381941603233842, 0.03381941603233842, 0.9982828964265062,
      -0.044802370851755174, -0.044802370851755174, 0.508629699630796, 0.8586508742123365,
      -0.044802370851755174, 0.508629699630796, -0.044802370851755174, 0.8586508742123365,
      -0.12128480194602098, 0.4321472685365301, 0.4321472685365301, 0.7821684431180708,
      0.508629699630796, -0.044802370851755174, -0.044802370851755174, 0.8586508742123365,
      0.4321472685365301, -0.12128480194602098, 0.4321472685365301, 0.7821684431180708,
      0.4321472685365301, 0.4321472685365301, -0.12128480194602098, 0.7821684431180708,
      0.37968289875261624, 0.37968289875261624, 0.37968289875261624, 0.753341017856078,
      0.03381941603233842, 0.03381941603233842, 0.9982828964265062, 0.03381941603233842,
      -0.044802370851755174, 0.044802370851755174, 0.8586508742123365, 0.508629699630796,
      -0.044802370851755174, 0.508629699630796, 0.8586508742123365, -0.044802370851755174,
      -0.12128480194602098, 0.4321472685365301, 0.7821684431180708, 0.4321472685365301,
      0.508629699630796, -0.044802370851755174, 0.8586508742123365, -0.044802370851755174,
      0.4321472685365301, -0.12128480194602098, 0.7821684431180708, 0.4321472685365301,
      0.4321472685365301, 0.4321472685365301, 0.7821684431180708, -0.12128480194602098,
      0.37968289875261624, 0.37968289875261624, 0.753341017856078, 0.37968289875261624,
      0.03381941603233842, 0.9982828964265062, 0.03381941603233842, 0.03381941603233842,
      -0.044802370851755174, 0.8586508742123365, -0.044802370851755174, 0.508629699630796,
      -0.044802370851755174, 0.8586508742123365, 0.508629699630796, -0.044802370851755174,
      -0.12128480194602098, 0.7821684431180708, 0.4321472685365301, 0.4321472685365301,
      0.508629699630796, 0.8586508742123365, -0.044802370851755174, -0.044802370851755174,
      0.4321472685365301, 0.7821684431180708, -0.12128480194602098, 0.4321472685365301,
      0.4321472685365301, 0.7821684431180708, 0.4321472685365301, -0.12128480194602098,
      0.37968289875261624, 0.753341017856078, 0.37968289875261624, 0.37968289875261624,
      0.9982828964265062, 0.03381941603233842, 0.03381941603233842, 0.03381941603233842,
      0.8586508742123365, -0.044802370851755174, -0.044802370851755174, 0.508629699630796,
      0.8586508742123365, -0.044802370851755174, 0.508629699630796, -0.044802370851755174,
      0.7821684431180708, -0.12128480194602098, 0.4321472685365301, 0.4321472685365301,
      0.8586508742123365, 0.508629699630796, -0.044802370851755174, -0.044802370851755174,
      0.7821684431180708, 0.4321472685365301, -0.12128480194602098, 0.4321472685365301,
      0.7821684431180708, 0.4321472685365301, 0.4321472685365301, -0.12128480194602098,
      0.753341017856078, 0.37968289875261624, 0.37968289875261624, 0.37968289875261624,
    ].map((n) => n / 8.881759591352166);

    for (let i = 0; i < 4 * 0x800; i++) {
      heapF64[offset + i] = gradients4D[i % gradients4D.length];
    }
  }
}

// create look ups
{
  const heapU32 = new Uint32Array(heap, 0x800 * 2 + (6 + (2 + 3 + 4) * 0x800) * 8);
  const heapI32 = new Int32Array(heap, 0x800 * 2 + (6 + (2 + 3 + 4) * 0x800) * 8);
  const heapF64 = new Float64Array(heap, 0x800 * 2 + (6 + (2 + 3 + 4) * 0x800) * 8);

  let offset32 = 0;
  let offset64 = 0;
  {
    const lookupPairs2D = [0, 1, 1, 0, 4, 1, 17, 0, 20, 2, 21, 2, 22, 5, 23, 5, 26, 4, 39, 3, 42, 4, 43, 3];
    for (let i = 0; i < lookupPairs2D.length / 2; ++i) {
      heapU32[lookupPairs2D[i << 1]] = lookupPairs2D[(i << 1) + 1];
    }

    offset32 += 64;
    offset64 += 32;

    const squish2D = (Math.sqrt(2 + 1) - 1) / 2;
    function setContribution2D(i, multiplier, xsb, ysb) {
      i *= 3;
      heapF64[offset64 + i] = -xsb - multiplier * squish2D;
      heapF64[offset64 + i + 1] = -ysb - multiplier * squish2D;
      heapI32[offset32 + 2 * i + 2 * 2] = xsb;
      heapI32[offset32 + 2 * i + 2 * 2 + 1] = ysb;
    }

    const base2D = [
      [1, 1, 0, 1, 0, 1, 0, 0, 0],
      [1, 1, 0, 1, 0, 1, 2, 1, 1],
    ];
    const p2D = [0, 0, 1, -1, 0, 0, -1, 1, 0, 2, 1, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 0];
    for (let i = 0; i < p2D.length; i += 4) {
      const baseSet = base2D[p2D[i]];
      for (let k = 0; k < baseSet.length; k += 3) {
        setContribution2D(i + k / 3, baseSet[k], baseSet[k + 1], baseSet[k + 2]);
      }
      setContribution2D(i + 3, p2D[i + 1], p2D[i + 2], p2D[i + 3]);
    }
  }
}

const { setSeed, eval2D } = OpenSimplex(
  {
    Math,
    Uint16Array,
    Uint32Array,
    Int32Array,
    Float64Array,
  },
  {
    setSeed: (value) => (random.seed = value),
    nextUint32: random.nextUint32,
    print(n) {
      return console.log(n);
    },
  },
  heap
);

let seed = 0;
setSeed(seed);

export default {
  set seed(value) {
    seed = value;
    setSeed(seed);
  },
  get seed() {
    return seed;
  },
  eval2D,
};
